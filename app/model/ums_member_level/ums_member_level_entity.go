// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package ums_member_level

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table ums_member_level.
type Entity struct {
    Id                    int64   `orm:"id,primary"              json:"id"`                      //                                 
    Name                  string  `orm:"name"                    json:"name"`                    //                                 
    GrowthPoint           int     `orm:"growth_point"            json:"growth_point"`            //                                 
    DefaultStatus         int     `orm:"default_status"          json:"default_status"`          // 是否为默认等级：0->不是；1->是  
    FreeFreightPoint      float64 `orm:"free_freight_point"      json:"free_freight_point"`      // 免运费标准                      
    CommentGrowthPoint    int     `orm:"comment_growth_point"    json:"comment_growth_point"`    // 每次评价获取的成长值            
    PriviledgeFreeFreight int     `orm:"priviledge_free_freight" json:"priviledge_free_freight"` // 是否有免邮特权                  
    PriviledgeSignIn      int     `orm:"priviledge_sign_in"      json:"priviledge_sign_in"`      // 是否有签到特权                  
    PriviledgeComment     int     `orm:"priviledge_comment"      json:"priviledge_comment"`      // 是否有评论获奖励特权            
    PriviledgePromotion   int     `orm:"priviledge_promotion"    json:"priviledge_promotion"`    // 是否有专享活动特权              
    PriviledgeMemberPrice int     `orm:"priviledge_member_price" json:"priviledge_member_price"` // 是否有会员价格特权              
    PriviledgeBirthday    int     `orm:"priviledge_birthday"     json:"priviledge_birthday"`     // 是否有生日特权                  
    Note                  string  `orm:"note"                    json:"note"`                    //                                 
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}