// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package oms_order_item

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table oms_order_item.
type Entity struct {
    Id                int64   `orm:"id,primary"          json:"id"`                  //                                                                           
    OrderId           int64   `orm:"order_id"            json:"order_id"`            // 订单id                                                                    
    OrderSn           string  `orm:"order_sn"            json:"order_sn"`            // 订单编号                                                                  
    ProductId         int64   `orm:"product_id"          json:"product_id"`          //                                                                           
    ProductPic        string  `orm:"product_pic"         json:"product_pic"`         //                                                                           
    ProductName       string  `orm:"product_name"        json:"product_name"`        //                                                                           
    ProductBrand      string  `orm:"product_brand"       json:"product_brand"`       //                                                                           
    ProductSn         string  `orm:"product_sn"          json:"product_sn"`          //                                                                           
    ProductPrice      float64 `orm:"product_price"       json:"product_price"`       // 销售价格                                                                  
    ProductQuantity   int     `orm:"product_quantity"    json:"product_quantity"`    // 购买数量                                                                  
    ProductSkuId      int64   `orm:"product_sku_id"      json:"product_sku_id"`      // 商品sku编号                                                               
    ProductSkuCode    string  `orm:"product_sku_code"    json:"product_sku_code"`    // 商品sku条码                                                               
    ProductCategoryId int64   `orm:"product_category_id" json:"product_category_id"` // 商品分类id                                                                
    PromotionName     string  `orm:"promotion_name"      json:"promotion_name"`      // 商品促销名称                                                              
    PromotionAmount   float64 `orm:"promotion_amount"    json:"promotion_amount"`    // 商品促销分解金额                                                          
    CouponAmount      float64 `orm:"coupon_amount"       json:"coupon_amount"`       // 优惠券优惠分解金额                                                        
    IntegrationAmount float64 `orm:"integration_amount"  json:"integration_amount"`  // 积分优惠分解金额                                                          
    RealAmount        float64 `orm:"real_amount"         json:"real_amount"`         // 该商品经过优惠后的分解金额                                                
    GiftIntegration   int     `orm:"gift_integration"    json:"gift_integration"`    //                                                                           
    GiftGrowth        int     `orm:"gift_growth"         json:"gift_growth"`         //                                                                           
    ProductAttr       string  `orm:"product_attr"        json:"product_attr"`        // 商品销售属性:[{"key":"颜色","value":"颜色"},{"key":"容量","value":"4G"}]  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}