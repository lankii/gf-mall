// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package cms_member_report

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table cms_member_report.
type Entity struct {
    Id               int64       `orm:"id"                 json:"id"`                 //                                                  
    ReportType       int         `orm:"report_type"        json:"report_type"`        // 举报类型：0->商品评价；1->话题内容；2->用户评论  
    ReportMemberName string      `orm:"report_member_name" json:"report_member_name"` // 举报人                                           
    CreateTime       *gtime.Time `orm:"create_time"        json:"create_time"`        //                                                  
    ReportObject     string      `orm:"report_object"      json:"report_object"`      //                                                  
    ReportStatus     int         `orm:"report_status"      json:"report_status"`      // 举报状态：0->未处理；1->已处理                   
    HandleStatus     int         `orm:"handle_status"      json:"handle_status"`      // 处理结果：0->无效；1->有效；2->恶意              
    Note             string      `orm:"note"               json:"note"`               //                                                  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}