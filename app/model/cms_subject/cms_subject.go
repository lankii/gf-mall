// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package cms_subject

import (
	"gf-mall/app/utils/page"

	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/errors/gerror"
)

// Fill with you ideas below.

//SelectPageReq 分页请求参数
type SelectPageReq struct {
	Title         string `p:"title"`         //特约商户号
	PageNum       int    `p:"pageNum"`       //当前页码
	PageSize      int    `p:"pageSize"`      //每页数
	OrderByColumn string `p:"orderByColumn"` //排序字段
	IsAsc         string `p:"isAsc"`         //排序方式
}

//SelectListByPage 根据条件分页查询数据
func SelectListByPage(param *SelectPageReq) (*page.Paging, error) {
	db, err := gdb.Instance()

	if err != nil {
		return nil, gerror.New("获取数据库连接失败")
	}

	model := db.Table("cms_subject t")

	if param != nil {

		if param.Title != "" {
			model.Where("t.title like ?", "%"+param.Title+"%")
		}

	}

	total, err := model.Count()

	if err != nil {
		return nil, gerror.New("读取行数失败")
	}

	page := page.CreatePaging(param.PageNum, param.PageSize, total)

	model.Limit(page.StartNum, page.Pagesize)

	if param.OrderByColumn != "" {
		model.Order(param.OrderByColumn + " " + param.IsAsc)
	}

	var result []Entity
	model.Structs(&result)
	page.List = result
	return page, nil
}
