// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package cms_subject

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table cms_subject.
type Entity struct {
    Id              int64       `orm:"id,primary"       json:"id"`               //                               
    CategoryId      int64       `orm:"category_id"      json:"category_id"`      //                               
    Title           string      `orm:"title"            json:"title"`            //                               
    Pic             string      `orm:"pic"              json:"pic"`              // 专题主图                      
    ProductCount    int         `orm:"product_count"    json:"product_count"`    // 关联产品数量                  
    RecommendStatus int         `orm:"recommend_status" json:"recommend_status"` //                               
    CreateTime      *gtime.Time `orm:"create_time"      json:"create_time"`      //                               
    CollectCount    int         `orm:"collect_count"    json:"collect_count"`    //                               
    ReadCount       int         `orm:"read_count"       json:"read_count"`       //                               
    CommentCount    int         `orm:"comment_count"    json:"comment_count"`    //                               
    AlbumPics       string      `orm:"album_pics"       json:"album_pics"`       // 画册图片用逗号分割            
    Description     string      `orm:"description"      json:"description"`      //                               
    ShowStatus      int         `orm:"show_status"      json:"show_status"`      // 显示状态：0->不显示；1->显示  
    Content         string      `orm:"content"          json:"content"`          //                               
    ForwardCount    int         `orm:"forward_count"    json:"forward_count"`    // 转发数                        
    CategoryName    string      `orm:"category_name"    json:"category_name"`    // 专题分类名称                  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}