// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package pms_product_attribute

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table pms_product_attribute.
type Entity struct {
    Id                         int64  `orm:"id,primary"                    json:"id"`                            //                                                          
    ProductAttributeCategoryId int64  `orm:"product_attribute_category_id" json:"product_attribute_category_id"` //                                                          
    Name                       string `orm:"name"                          json:"name"`                          //                                                          
    SelectType                 int    `orm:"select_type"                   json:"select_type"`                   // 属性选择类型：0->唯一；1->单选；2->多选                  
    InputType                  int    `orm:"input_type"                    json:"input_type"`                    // 属性录入方式：0->手工录入；1->从列表中选取               
    InputList                  string `orm:"input_list"                    json:"input_list"`                    // 可选值列表，以逗号隔开                                   
    Sort                       int    `orm:"sort"                          json:"sort"`                          // 排序字段：最高的可以单独上传图片                         
    FilterType                 int    `orm:"filter_type"                   json:"filter_type"`                   // 分类筛选样式：1->普通；1->颜色                           
    SearchType                 int    `orm:"search_type"                   json:"search_type"`                   // 检索类型；0->不需要进行检索；1->关键字检索；2->范围检索  
    RelatedStatus              int    `orm:"related_status"                json:"related_status"`                // 相同属性产品是否关联；0->不关联；1->关联                 
    HandAddStatus              int    `orm:"hand_add_status"               json:"hand_add_status"`               // 是否支持手动新增；0->不支持；1->支持                     
    Type                       int    `orm:"type"                          json:"type"`                          // 属性的类型；0->规格；1->参数                             
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}