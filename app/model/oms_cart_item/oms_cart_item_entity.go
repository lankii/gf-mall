// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package oms_cart_item

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table oms_cart_item.
type Entity struct {
    Id                int64       `orm:"id,primary"          json:"id"`                  //                                                                           
    ProductId         int64       `orm:"product_id"          json:"product_id"`          //                                                                           
    ProductSkuId      int64       `orm:"product_sku_id"      json:"product_sku_id"`      //                                                                           
    MemberId          int64       `orm:"member_id"           json:"member_id"`           //                                                                           
    Quantity          int         `orm:"quantity"            json:"quantity"`            // 购买数量                                                                  
    Price             float64     `orm:"price"               json:"price"`               // 添加到购物车的价格                                                        
    ProductPic        string      `orm:"product_pic"         json:"product_pic"`         // 商品主图                                                                  
    ProductName       string      `orm:"product_name"        json:"product_name"`        // 商品名称                                                                  
    ProductSubTitle   string      `orm:"product_sub_title"   json:"product_sub_title"`   // 商品副标题（卖点）                                                        
    ProductSkuCode    string      `orm:"product_sku_code"    json:"product_sku_code"`    // 商品sku条码                                                               
    MemberNickname    string      `orm:"member_nickname"     json:"member_nickname"`     // 会员昵称                                                                  
    CreateDate        *gtime.Time `orm:"create_date"         json:"create_date"`         // 创建时间                                                                  
    ModifyDate        *gtime.Time `orm:"modify_date"         json:"modify_date"`         // 修改时间                                                                  
    DeleteStatus      int         `orm:"delete_status"       json:"delete_status"`       // 是否删除                                                                  
    ProductCategoryId int64       `orm:"product_category_id" json:"product_category_id"` // 商品分类                                                                  
    ProductBrand      string      `orm:"product_brand"       json:"product_brand"`       //                                                                           
    ProductSn         string      `orm:"product_sn"          json:"product_sn"`          //                                                                           
    ProductAttr       string      `orm:"product_attr"        json:"product_attr"`        // 商品销售属性:[{"key":"颜色","value":"颜色"},{"key":"容量","value":"4G"}]  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}