// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package oms_order_setting

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table oms_order_setting.
type Entity struct {
    Id                  int64 `orm:"id,primary"            json:"id"`                    //                                       
    FlashOrderOvertime  int   `orm:"flash_order_overtime"  json:"flash_order_overtime"`  // 秒杀订单超时关闭时间(分)              
    NormalOrderOvertime int   `orm:"normal_order_overtime" json:"normal_order_overtime"` // 正常订单超时时间(分)                  
    ConfirmOvertime     int   `orm:"confirm_overtime"      json:"confirm_overtime"`      // 发货后自动确认收货时间（天）          
    FinishOvertime      int   `orm:"finish_overtime"       json:"finish_overtime"`       // 自动完成交易时间，不能申请售后（天）  
    CommentOvertime     int   `orm:"comment_overtime"      json:"comment_overtime"`      // 订单完成后自动好评时间（天）          
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}