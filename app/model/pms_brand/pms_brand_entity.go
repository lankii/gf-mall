// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package pms_brand

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table pms_brand.
type Entity struct {
    Id                  int64  `orm:"id,primary"            json:"id"`                    //                                   
    Name                string `orm:"name"                  json:"name"`                  //                                   
    FirstLetter         string `orm:"first_letter"          json:"first_letter"`          // 首字母                            
    Sort                int    `orm:"sort"                  json:"sort"`                  //                                   
    FactoryStatus       int    `orm:"factory_status"        json:"factory_status"`        // 是否为品牌制造商：0->不是；1->是  
    ShowStatus          int    `orm:"show_status"           json:"show_status"`           //                                   
    ProductCount        int    `orm:"product_count"         json:"product_count"`         // 产品数量                          
    ProductCommentCount int    `orm:"product_comment_count" json:"product_comment_count"` // 产品评论数量                      
    Logo                string `orm:"logo"                  json:"logo"`                  // 品牌logo                          
    BigPic              string `orm:"big_pic"               json:"big_pic"`               // 专区大图                          
    BrandStory          string `orm:"brand_story"           json:"brand_story"`           // 品牌故事                          
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}