// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package pms_product_category

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table pms_product_category.
type Entity struct {
    Id           int64  `orm:"id,primary"    json:"id"`            //                                       
    ParentId     int64  `orm:"parent_id"     json:"parent_id"`     // 上机分类的编号：0表示一级分类         
    Name         string `orm:"name"          json:"name"`          //                                       
    Level        int    `orm:"level"         json:"level"`         // 分类级别：0->1级；1->2级              
    ProductCount int    `orm:"product_count" json:"product_count"` //                                       
    ProductUnit  string `orm:"product_unit"  json:"product_unit"`  //                                       
    NavStatus    int    `orm:"nav_status"    json:"nav_status"`    // 是否显示在导航栏：0->不显示；1->显示  
    ShowStatus   int    `orm:"show_status"   json:"show_status"`   // 显示状态：0->不显示；1->显示          
    Sort         int    `orm:"sort"          json:"sort"`          //                                       
    Icon         string `orm:"icon"          json:"icon"`          // 图标                                  
    Keywords     string `orm:"keywords"      json:"keywords"`      //                                       
    Description  string `orm:"description"   json:"description"`   // 描述                                  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}