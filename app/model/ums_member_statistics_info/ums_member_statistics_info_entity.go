// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package ums_member_statistics_info

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table ums_member_statistics_info.
type Entity struct {
    Id                  int64       `orm:"id,primary"            json:"id"`                    //                     
    MemberId            int64       `orm:"member_id"             json:"member_id"`             //                     
    ConsumeAmount       float64     `orm:"consume_amount"        json:"consume_amount"`        // 累计消费金额        
    OrderCount          int         `orm:"order_count"           json:"order_count"`           // 订单数量            
    CouponCount         int         `orm:"coupon_count"          json:"coupon_count"`          // 优惠券数量          
    CommentCount        int         `orm:"comment_count"         json:"comment_count"`         // 评价数              
    ReturnOrderCount    int         `orm:"return_order_count"    json:"return_order_count"`    // 退货数量            
    LoginCount          int         `orm:"login_count"           json:"login_count"`           // 登录次数            
    AttendCount         int         `orm:"attend_count"          json:"attend_count"`          // 关注数量            
    FansCount           int         `orm:"fans_count"            json:"fans_count"`            // 粉丝数量            
    CollectProductCount int         `orm:"collect_product_count" json:"collect_product_count"` //                     
    CollectSubjectCount int         `orm:"collect_subject_count" json:"collect_subject_count"` //                     
    CollectTopicCount   int         `orm:"collect_topic_count"   json:"collect_topic_count"`   //                     
    CollectCommentCount int         `orm:"collect_comment_count" json:"collect_comment_count"` //                     
    InviteFriendCount   int         `orm:"invite_friend_count"   json:"invite_friend_count"`   //                     
    RecentOrderTime     *gtime.Time `orm:"recent_order_time"     json:"recent_order_time"`     // 最后一次下订单时间  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}