// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package sms_coupon

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table sms_coupon.
type Entity struct {
    Id           int64       `orm:"id,primary"    json:"id"`            //                                                                 
    Type         int         `orm:"type"          json:"type"`          // 优惠卷类型；0->全场赠券；1->会员赠券；2->购物赠券；3->注册赠券  
    Name         string      `orm:"name"          json:"name"`          //                                                                 
    Platform     int         `orm:"platform"      json:"platform"`      // 使用平台：0->全部；1->移动；2->PC                               
    Count        int         `orm:"count"         json:"count"`         // 数量                                                            
    Amount       float64     `orm:"amount"        json:"amount"`        // 金额                                                            
    PerLimit     int         `orm:"per_limit"     json:"per_limit"`     // 每人限领张数                                                    
    MinPoint     float64     `orm:"min_point"     json:"min_point"`     // 使用门槛；0表示无门槛                                           
    StartTime    *gtime.Time `orm:"start_time"    json:"start_time"`    //                                                                 
    EndTime      *gtime.Time `orm:"end_time"      json:"end_time"`      //                                                                 
    UseType      int         `orm:"use_type"      json:"use_type"`      // 使用类型：0->全场通用；1->指定分类；2->指定商品                 
    Note         string      `orm:"note"          json:"note"`          // 备注                                                            
    PublishCount int         `orm:"publish_count" json:"publish_count"` // 发行数量                                                        
    UseCount     int         `orm:"use_count"     json:"use_count"`     // 已使用数量                                                      
    ReceiveCount int         `orm:"receive_count" json:"receive_count"` // 领取数量                                                        
    EnableTime   *gtime.Time `orm:"enable_time"   json:"enable_time"`   // 可以领取的日期                                                  
    Code         string      `orm:"code"          json:"code"`          // 优惠码                                                          
    MemberLevel  int         `orm:"member_level"  json:"member_level"`  // 可领取的会员类型：0->无限时                                     
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}