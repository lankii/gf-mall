// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package pms_product_operate_log

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table pms_product_operate_log.
type Entity struct {
    Id               int64       `orm:"id,primary"          json:"id"`                  //             
    ProductId        int64       `orm:"product_id"          json:"product_id"`          //             
    PriceOld         float64     `orm:"price_old"           json:"price_old"`           //             
    PriceNew         float64     `orm:"price_new"           json:"price_new"`           //             
    SalePriceOld     float64     `orm:"sale_price_old"      json:"sale_price_old"`      //             
    SalePriceNew     float64     `orm:"sale_price_new"      json:"sale_price_new"`      //             
    GiftPointOld     int         `orm:"gift_point_old"      json:"gift_point_old"`      // 赠送的积分  
    GiftPointNew     int         `orm:"gift_point_new"      json:"gift_point_new"`      //             
    UsePointLimitOld int         `orm:"use_point_limit_old" json:"use_point_limit_old"` //             
    UsePointLimitNew int         `orm:"use_point_limit_new" json:"use_point_limit_new"` //             
    OperateMan       string      `orm:"operate_man"         json:"operate_man"`         // 操作人      
    CreateTime       *gtime.Time `orm:"create_time"         json:"create_time"`         //             
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}