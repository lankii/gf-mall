// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package ums_member_rule_setting

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table ums_member_rule_setting.
type Entity struct {
    Id                int64   `orm:"id,primary"          json:"id"`                  //                                   
    ContinueSignDay   int     `orm:"continue_sign_day"   json:"continue_sign_day"`   // 连续签到天数                      
    ContinueSignPoint int     `orm:"continue_sign_point" json:"continue_sign_point"` // 连续签到赠送数量                  
    ConsumePerPoint   float64 `orm:"consume_per_point"   json:"consume_per_point"`   // 每消费多少元获取1个点             
    LowOrderAmount    float64 `orm:"low_order_amount"    json:"low_order_amount"`    // 最低获取点数的订单金额            
    MaxPointPerOrder  int     `orm:"max_point_per_order" json:"max_point_per_order"` // 每笔订单最高获取点数              
    Type              int     `orm:"type"                json:"type"`                // 类型：0->积分规则；1->成长值规则  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}