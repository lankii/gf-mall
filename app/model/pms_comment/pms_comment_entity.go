// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package pms_comment

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table pms_comment.
type Entity struct {
    Id               int64       `orm:"id,primary"        json:"id"`                //                           
    ProductId        int64       `orm:"product_id"        json:"product_id"`        //                           
    MemberNickName   string      `orm:"member_nick_name"  json:"member_nick_name"`  //                           
    ProductName      string      `orm:"product_name"      json:"product_name"`      //                           
    Star             int         `orm:"star"              json:"star"`              // 评价星数：0->5            
    MemberIp         string      `orm:"member_ip"         json:"member_ip"`         // 评价的ip                  
    CreateTime       *gtime.Time `orm:"create_time"       json:"create_time"`       //                           
    ShowStatus       int         `orm:"show_status"       json:"show_status"`       //                           
    ProductAttribute string      `orm:"product_attribute" json:"product_attribute"` // 购买时的商品属性          
    CollectCouont    int         `orm:"collect_couont"    json:"collect_couont"`    //                           
    ReadCount        int         `orm:"read_count"        json:"read_count"`        //                           
    Content          string      `orm:"content"           json:"content"`           //                           
    Pics             string      `orm:"pics"              json:"pics"`              // 上传图片地址，以逗号隔开  
    MemberIcon       string      `orm:"member_icon"       json:"member_icon"`       // 评论用户头像              
    ReplayCount      int         `orm:"replay_count"      json:"replay_count"`      //                           
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}