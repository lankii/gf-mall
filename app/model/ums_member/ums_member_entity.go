// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package ums_member

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table ums_member.
type Entity struct {
    Id                    int64       `orm:"id,primary"             json:"id"`                     //                                
    MemberLevelId         int64       `orm:"member_level_id"        json:"member_level_id"`        //                                
    Username              string      `orm:"username,unique"        json:"username"`               // 用户名                         
    Password              string      `orm:"password"               json:"password"`               // 密码                           
    Nickname              string      `orm:"nickname"               json:"nickname"`               // 昵称                           
    Phone                 string      `orm:"phone,unique"           json:"phone"`                  // 手机号码                       
    Status                int         `orm:"status"                 json:"status"`                 // 帐号启用状态:0->禁用；1->启用  
    CreateTime            *gtime.Time `orm:"create_time"            json:"create_time"`            // 注册时间                       
    Icon                  string      `orm:"icon"                   json:"icon"`                   // 头像                           
    Gender                int         `orm:"gender"                 json:"gender"`                 // 性别：0->未知；1->男；2->女    
    Birthday              *gtime.Time `orm:"birthday"               json:"birthday"`               // 生日                           
    City                  string      `orm:"city"                   json:"city"`                   // 所做城市                       
    Job                   string      `orm:"job"                    json:"job"`                    // 职业                           
    PersonalizedSignature string      `orm:"personalized_signature" json:"personalized_signature"` // 个性签名                       
    SourceType            int         `orm:"source_type"            json:"source_type"`            // 用户来源                       
    Integration           int         `orm:"integration"            json:"integration"`            // 积分                           
    Growth                int         `orm:"growth"                 json:"growth"`                 // 成长值                         
    LuckeyCount           int         `orm:"luckey_count"           json:"luckey_count"`           // 剩余抽奖次数                   
    HistoryIntegration    int         `orm:"history_integration"    json:"history_integration"`    // 历史积分数量                   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}